esphome:
  name: esphome-web-1b0c70
  friendly_name: 'dashboard1'
  on_boot:
    priority: 200.0
    then:
      - delay: 5s
      - script.execute: update_screen

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret dashboard1_key

ota:

# Waveshare ePaper Display
spi:
  clk_pin: 13
  mosi_pin: 14

select:
  - platform: template
    name: Dashboard Page
    id: page
    options:
     - "Woman with a Hat (1905)"
     - "Weeping Woman (1937)"
     - "Dashboard"
    initial_option: "Dashboard"
    optimistic: true
    on_value:
      then:
        - script.execute: update_screen

# Borrowed from @Madelena's Weatherman
# github.com/Madelena/esphome-weatherman-dashboard/blob/main/weatherman.yaml
globals:
  - id: data_updated
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: recorded_display_refresh
    type: int
    restore_value: yes
    initial_value: '0'

script:
  - id: update_screen
    then:
      - display.page.show: !lambda |-
          if ( id(page).active_index() == 0 ) {
            return id(art1);
          } else if ( id(page).active_index() == 1 ) {
            return id(art2);
          } else {
            return id(dashboard);
          }
      - component.update: eink_display
      - lambda: 'id(recorded_display_refresh) += 1;'

# We're going to use this as a pseudo on/off as ePaper displays don't use any energy when not writing to the display.
switch:
  - platform: template
    name: "Dashboard Power"
    id: dashboard_on
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    turn_on_action:
      - script.execute: update_screen
    turn_off_action:
      - logger.log: "Display Off!"

sensor:
  # Send Home Assistant data to ESP32
  - platform: homeassistant
    entity_id: sensor.dashboard1_data
    attribute: occupancy
    id: occupancy

  - platform: homeassistant
    entity_id: sensor.dashboard1_data
    attribute: weather_condition_now
    id: weather_condition_now
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.dashboard1_data
    attribute: weather_temperature_now
    id: weather_temperature_now
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.dashboard1_data
    attribute: bin_day
    id: bin_day
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.dashboard1_data
    attribute: city_train
    id: city_train

  # Diagnostic data
  - platform: template
    name: "Total Lifetime Refreshes"
    accuracy_decimals: 0
    state_class: "total_increasing"
    entity_category: "diagnostic"
    lambda: 'return id(recorded_display_refresh);'

font:
  - file: "fonts/mac-regular.ttf"
    id: mac_regular
    size: 42

image:
  - file: "img/art1.bmp"
    id: img_art1
  - file: "img/art2.bmp"
    id: img_art2

display:
  - platform: waveshare_epaper
    id: eink_display
    cs_pin: 15
    dc_pin: 27
    busy_pin: 25
    reset_pin: 26
    model: 7.50inv2
    update_interval: never
    rotation: 90°
    pages:
      - id: art1
        lambda: |-
          it.image(0, 10, id(img_art1));
      - id: art2
        lambda: |-
         it.image(0, 10, id(img_art2));
      - id: dashboard
        lambda: |-
         it.printf(60, 250, id(mac_regular), "%.0f°C", id(weather_temperature_now).state);

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-1B0C70"
    password: "D2Pj1MIedpvU"

captive_portal:
